<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wangzhixuan.mapper.ExamYearlyMapper" >
  <resultMap id="BaseResultMap" type="com.wangzhixuan.model.ExamYearly" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="people_code" property="peopleCode" jdbcType="VARCHAR" />
    <result column="year" property="year" jdbcType="INTEGER" />
    <result column="exam_result" property="examResult" jdbcType="VARCHAR" />
    <result column="exam_operation" property="examOperation" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="ExamYearlyVoMap" type="com.wangzhixuan.vo.ExamYearlyVo">
    <id column="id" property="id" jdbcType="INTEGER"/>
    <result column="people_code" property="peopleCode" jdbcType="VARCHAR"/>
    <result column="name" property="name" jdbcType="VARCHAR"/>
    <result column="year" property="year" jdbcType="INTEGER"/>
    <result column="exam_result" property="examResult" jdbcType="VARCHAR"/>
    <result column="exam_operation" property="examOperation" jdbcType="VARCHAR"/>
  </resultMap>

  <sql id="Base_Column_List" >
    id, people_code, year, exam_result, exam_operation
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from exam_yearly
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from exam_yearly
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.wangzhixuan.model.ExamYearly" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into exam_yearly (people_code, year, exam_result, exam_operation)
    values (#{peopleCode,jdbcType=VARCHAR},
      #{year,jdbcType=INTEGER}, #{examResult,jdbcType=VARCHAR}, #{examOperation,jdbcType=VARCHAR}
      )
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.wangzhixuan.model.ExamYearly" >
    update exam_yearly
    set
      people_code     = #{peopleCode,jdbcType=VARCHAR},
      year            = #{year,jdbcType=INTEGER},
      exam_result     = #{examResult,jdbcType=VARCHAR},
      exam_operation  = #{examOperation,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findPageCondition" parameterType="PageInfo" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from exam_yearly t
    <where>
      <if test=" condition.peopleCode != null and condition.peopleCode != ''">
        and t.people_code LIKE concat('%',#{condition.peopleCode},'%')
      </if>
    </where>
    LIMIT #{from}, #{size}
  </select>

  <select id="findPageCount" resultType="java.lang.Integer" parameterType="PageInfo">
    select count(t.id) COUNT
    FROM exam_yearly t
    <where>
      <if test=" condition.peopleCode != null and condition.peopleCode != ''">
        and t.people_code LIKE concat('%',#{condition.peopleCode},'%')
      </if>
    </where>
  </select>

  <select id="findExamYearlyVoListByCode" resultMap="ExamYearlyVoMap" parameterType="java.lang.String">
    SELECT
    t.id,
    t.people_code,
    p.name as name,
    t.year,
    t.exam_result,
    t.exam_operation
    FROM
    exam_yearly t
    LEFT JOIN
    people_total p ON t.people_code = p.code
    <where>
      t.people_code = #{code,jdbcType=VARCHAR}
    </where>
  </select>

  <select id="findExamYearlyByCodeAndYear" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from exam_yearly t
    <where>
      <if test=" peopleCode != null and peopleCode != ''">
        and t.people_code LIKE concat('%',#{peopleCode},'%')
      </if>
      <if test="year != null">
        and t.year = #{year}
      </if>
    </where>
    LIMIT 0, 1
  </select>

  <insert id="insertByImport" parameterType="java.util.List">
        insert into exam_yearly (people_code, year, exam_result, exam_operation
        )
        values
        <foreach item="item" index="index" collection="list" separator=",">
            (
            #{item.peopleCode, jdbcType=VARCHAR},
            #{item.year, jdbcType=INTEGER},
            #{item.examResult,jdbcType=VARCHAR},
            #{item.examOperation, jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

</mapper>